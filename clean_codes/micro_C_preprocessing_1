import yaml

# Load configuration from config.yaml
with open('config.yaml', 'r') as stream:
    config = yaml.safe_load(stream)

# Define paths from config.yaml
fastq_dir = config['fastq_dir']
samples = config['samples']

# Initial print statements for clarity
onstart:
    print("\n==== microC pipeline starts ====")
    print("Configuration:")
    print(config)
    print("=" * 80)
    print()

# Main workflow
rule all:
    input:
        expand("05_multiqc/{sample}/multiqc_report.html", sample=samples),
        expand("06_matrix/{sample}_10kb.cool", sample = samples)

rule fastp:
    input:
        fq1 = str(fastq_dir) + "/{sample}_R1.fastq.gz",
        fq2 = str(fastq_dir) + "/{sample}_R2.fastq.gz"
    output:
        trim_fq1 = "01_preprocessing/{sample}_R1.fastq.gz",
        trim_fq2 = "01_preprocessing/{sample}_R2.fastq.gz",
        html_rep = "01_preprocessing/{sample}_report.html",
        json_rep = "01_preprocessing/{sample}_report.json"
    threads: 20
    log:
        "logs/fastp/{sample}.log"
    shell:
        """
        module load fastp/0.20.1
        fastp \
            -w {threads} \
            -i {input.fq1} \
            -I {input.fq2} \
            -o {output.trim_fq1} \
            -O {output.trim_fq2} \
            -h {output.html_rep} \
            -j {output.json_rep} 2> {log}
        """
 
rule bwa_mapping:
    input:
        fq1 = "01_preprocessing/{sample}_R1.fastq.gz",
        fq2 = "01_preprocessing/{sample}_R2.fastq.gz",
        genome = "02_genome/genome.fa"
    output:
        bam = "03_mapping/{sample}.sam"
    threads: 20
    log:
        "logs/bwa/align_{sample}.log"
    shell:
        """
        bwa mem \
            -5SP -T0 \
            -t {threads} \
            {input.genome} \
            {input.fq1} \
            {input.fq2} \
            -o {output} 2> {log}
        """

rule pairtools_parse:
    input:
        bam = "03_mapping/{sample}.sam",
        chr_sizes = "02_genome/genome.chrom.sizes"
    output:
        pairs = "04_pairing/{sample}_XA.pairs.gz"
    params:
        par = config['pairtools_parse_params']
    threads: 1
    log:
        "logs/pairtools/parse_{sample}.log"
    shell:
        """
        pairtools parse \
            {params.par} \
            -c {input.chr_sizes} \
            {input.bam} \
            -o {output.pairs} 2> {log}
        """

rule pairtools_sort:
    input:
        pairs = "04_pairing/{sample}_XA.pairs.gz"
    output:
        pairs = "04_pairing/{sample}_sorted_XA.pairs.gz"
    threads: 20
    log:
        "logs/pairtools/sort_{sample}.log"
    shell:
        """
        pairtools sort \
            {input.pairs} \
            --nproc {threads} \
            -o {output.pairs} 2> {log}
        """

rule pairtools_dedup:
    input:
        pairs = "04_pairing/{sample}_sorted_XA.pairs.gz"
    output:
        pairs = "04_pairing/{sample}_dedup_XA.pairs.gz",
        stats = "04_pairing/{sample}_dedup_XA.stats"
    threads: 1
    log:
        "logs/pairtools/dedup_{sample}.log"
    shell:
        """
        pairtools dedup \
            --mark-dups \
            --output-dups - \
            --output-unmapped - \
            --output-stats {output.stats} \
            -o {output.pairs} \
            {input.pairs} 2> {log}
        """

rule multiqc:
    input:
        stats = "04_pairing/{sample}_dedup_XA.stats"
    output:
        dir = directory("05_multiqc/{sample}"),
        html = "05_multiqc/{sample}/multiqc_report.html"
    threads: 1
    log:
        "logs/multiqc/{sample}.log"
    shell:
        """
        multiqc \
            --module pairtools \
            -o {output.dir} \
            04_pairing/ 2> {log}
        """

rule build_matrix:
    input:
        pairs = "04_pairing/{sample}_dedup_XA.pairs.gz",
        genome = "02_genome/genome.chrom.sizes"
    output:
        pairix = "04_pairing/{sample}_dedup_XA.pairs.gz.px2",
        matrix = "06_matrix/{sample}_10kb.cool"
    log:
        "logs/matrix/{sample}.log"
    shell:
        """
        pairix {input.pairs}
        cooler cload pairix -p 16 \
        {input.genome}:10000 \
        {input.pairs} \
        {output.matrix}
        """
        
onsuccess:
    print("\n==== Workflow finished successfully! ====\n")
